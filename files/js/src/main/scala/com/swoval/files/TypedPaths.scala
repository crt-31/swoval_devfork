// Do not edit this file manually. It is autogenerated.

package com.swoval.files

import java.io.IOException
import java.nio.file.Path
import scala.beans.{ BeanProperty, BooleanBeanProperty }

object TypedPaths {

  private abstract class TypedPathImpl(@BeanProperty val path: Path) extends TypedPath {

    private var realPath: Path = _

    override def expanded(): Path = path.synchronized {
      if (realPath == null) {
        try {
          realPath = if (isSymbolicLink) path.toRealPath() else path
          realPath
        } catch {
          case e: IOException => path

        }
      } else {
        realPath
      }
    }

    override def toString(): String =
      "TypedPath(" + path + ", " + isSymbolicLink + ", " + expanded() +
        ")"

    override def equals(other: Any): Boolean = other match {
      case other: TypedPath => other.getPath == getPath
      case _                => false

    }

    override def hashCode(): Int = getPath.hashCode

  }

  def getDelegate(path: Path, typedPath: TypedPath): TypedPath =
    new TypedPathImpl(path) {
      override def exists(): Boolean = typedPath.exists()

      override def isDirectory(): Boolean = typedPath.isDirectory

      override def isFile(): Boolean = typedPath.isFile

      override def isSymbolicLink(): Boolean = typedPath.isSymbolicLink
    }

  /**
   * Returns a typed path for the given path.
   *
   * @param path the path to convert to a typed path
   * @return the [[TypedPath]] for the input path.
   */
  def get(path: Path): TypedPath =
    try get(path, Entries.getKind(path))
    catch {
      case e: IOException => get(path, Entries.NONEXISTENT)

    }

  def get(path: Path, kind: Int): TypedPath =
    new TypedPathImpl(if (path.isAbsolute) path else path.toAbsolutePath()) {
      override def exists(): Boolean = (kind & Entries.NONEXISTENT) == 0

      override def isDirectory(): Boolean = (kind & Entries.DIRECTORY) != 0

      override def isFile(): Boolean = (kind & Entries.FILE) != 0

      override def isSymbolicLink(): Boolean = (kind & Entries.LINK) != 0
    }

}
