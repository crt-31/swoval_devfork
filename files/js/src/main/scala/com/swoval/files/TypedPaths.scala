// Do not edit this file manually. It is autogenerated.

package com.swoval.files

import java.io.IOException
import java.nio.file.Path
import scala.beans.{ BeanProperty, BooleanBeanProperty }

object TypedPaths {

  private abstract class TypedPathImpl(@BeanProperty val path: Path) extends TypedPath {

    private var realPath: Path = _

    def expanded(): Path =
      path.synchronized {
        if (realPath == null) {
          try {
            realPath = if (isSymbolicLink) path.toRealPath() else path
            realPath
          } catch {
            case e: IOException => path

          }
        } else {
          realPath
        }
      }

    override def toString(): String =
      "TypedPath(path: " + path + ", exists: " + exists() +
        ", isFile: " +
        isFile +
        ", isDirectory: " +
        isDirectory +
        ", isSymbolicLink: " +
        isSymbolicLink +
        ")"

    override def equals(other: Any): Boolean =
      other match {
        case other: TypedPath => other.getPath == getPath
        case _                => false

      }

    override def hashCode(): Int = getPath.hashCode

  }

  def expanded(typedPath: TypedPath): Path =
    if (typedPath.isInstanceOf[TypedPathImpl]) {
      typedPath.asInstanceOf[TypedPathImpl].expanded()
    } else {
      try if (typedPath.isSymbolicLink) typedPath.getPath.toRealPath()
      else typedPath.getPath
      catch {
        case e: IOException => typedPath.getPath

      }
    }

  def getDelegate(path: Path, typedPath: TypedPath): TypedPath =
    new TypedPathImpl(path) {
      override def exists(): Boolean = typedPath.exists()

      override def isDirectory(): Boolean = typedPath.isDirectory

      override def isFile(): Boolean = typedPath.isFile

      override def isSymbolicLink(): Boolean = typedPath.isSymbolicLink
    }

  /**
   * Returns a typed path for the given path.
   *
   * @param path the path to convert to a typed path
   * @return the [[TypedPath]] for the input path.
   */
  def get(path: Path): TypedPath =
    try get(path, Entries.getKind(path))
    catch {
      case e: IOException => get(path, Entries.NONEXISTENT)

    }

  def getKind(typedPath: TypedPath): Int =
    (if (typedPath.exists()) 0 else Entries.NONEXISTENT) |
      (if (typedPath.isDirectory) Entries.DIRECTORY else 0) |
      (if (typedPath.isFile) Entries.FILE else 0) |
      (if (typedPath.isSymbolicLink) Entries.LINK else 0)

  def get(path: Path, kind: Int): TypedPath =
    new TypedPathImpl(if (path.isAbsolute) path else path.toAbsolutePath()) {
      override def exists(): Boolean = (kind & Entries.NONEXISTENT) == 0

      override def isDirectory(): Boolean = (kind & Entries.DIRECTORY) != 0

      override def isFile(): Boolean = (kind & Entries.FILE) != 0

      override def isSymbolicLink(): Boolean = (kind & Entries.LINK) != 0
    }

}
